#!/bin/bash

function usage {
  echo "Usage: `basename $0` -m modelname -s [season-yyyy-mm|community race name] -t <sleep time in second> -c"
  echo "-m <model name> is mandatory"
  echo "-s [season-yyyy-mm|community race name] if it is not used, the race name is set to season-<current year>-<current-month>"
  echo "-c is optional for community race"
  echo "-t <sleep time in second> is optional"
}

SEASON="season-$(date +%Y-%m)"
TIME=0
m_flag=0
c_flag=0
while getopts "m:cs:t:" opt; do
  case "$opt" in
  m)
    MODELNAME="$OPTARG"
    m_flag=1
    ;;
  c)
    c_flag=1
    ;;
  s)
    SEASONX=(${OPTARG//-/ })
    if [ "${SEASONX[0]}" -eq "${SEASONX[0]}" ] 2>/dev/null
    then
      SEASON="season-$OPTARG"
    else
      SEASON="$OPTARG"
    fi
    ;;
  t)
    TIME="$OPTARG"
    ;;
  \?)
    usage
    exit
    ;;
  esac
done

if [ $m_flag -eq 0 ]; then
  usage
  exit
fi

CONFIGFILE="aws-deepracer.cf"

if [ -f "$CONFIGFILE" ]; then
  EMAIL=$(grep -i EMAIL "$CONFIGFILE" | awk -F= '{gsub(/"/, "", $2); print $2}')
	SUBMISSION_MAX=$(grep -i SUBMISSION_MAX $CONFIGFILE | awk -F= '{gsub(/"/, "", $2); print $2}')
else
  echo "The config file "$CONFIGFILE" is not found"
  exit 1
fi

if [ -z "$EMAIL" ]; then
  read -p 'Email: ' EMAIL
fi
if [ -z "$SUBMISSION_MAX" ]; then
	SUBMISSION_MAX=20
fi

sleep $TIME
submissionCounter=0
waitingTime=0
while [ $submissionCounter -lt $SUBMISSION_MAX ];
do
  sleep $waitingTime
  date
  if [ $c_flag -eq 0 ]; then
    submissionReport=$(./aws-createLeaderboardSubmission -m "$MODELNAME" -s "$SEASON")
  else
    submissionReport=$(./aws-createLeaderboardSubmission -m "$MODELNAME" -s "$SEASON" -c)
  fi
  submissionLength=$(echo "$submissionReport" | jq 'length')
  if [ "$submissionLength" != 0 ]
  then
    report=$(echo "$submissionReport" | jq '.Message')
    if [ "$report" == "null" ]; then
      report=$(echo "$submissionReport" | jq '.error[0]')
      if [[ $report == *auth* ]]; then
        source ./aws-authenticate
	      continue
      elif [ "$report" == "null" ]; then
        report="Unknown problem"
      fi
    fi
    echo "$report"
    echo "$report" | mailx -s "Deepracer Submission" "$EMAIL"
    exit 1
  fi
  submissionCounter=$((  $submissionCounter + 1 ))
  sleep 300
  latestStatus='"RUNNING"'
  waitingCounter=0
  while [ "$latestStatus" == '"RUNNING"' ]
  do
    if [ $c_flag -eq 0 ]; then
      latestUserSubmission=$(./aws-getLatestUserSubmission -s "$SEASON")
    else
      latestUserSubmission=$(./aws-getLatestUserSubmission -s "$SEASON" -c)
    fi
    latestStatus=$(echo "$latestUserSubmission" | jq '.LeaderboardSubmission.LeaderboardSubmissionStatusType')
    lapTime=$(echo "$latestUserSubmission" | jq '.LeaderboardSubmission.AvgLapTime')
    echo "$latestStatus $lapTime"
    waitingCounter=$(( $waitingCounter + 1 ))
    sleep 10
  done
  echo "$latestStatus: $lapTime" | mailx -s "Deepracer Submission" $EMAIL
  waitingTime=$(( 30*60 - 300 - 10*$waitingCounter ))
done
 
echo "End of Submission"  | mailx -s "Deepracer Submission" $EMAIL 

